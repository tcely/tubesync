# Generated by Django 5.1.8 on 2025-04-24 01:55

import django.core.files.storage
import django.core.validators
import sync.fields
import sync.models
from django.db import migrations, models


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# sync.migrations.0013_fix_elative_media_file
from django.conf import settings
from pathlib import Path

def fix_media_file(apps, schema_editor):
    Media = apps.get_model('sync', 'Media')
    download_dir = str(settings.DOWNLOAD_ROOT)
    download_dir_path = Path(download_dir)
    for media in Media.objects.filter(downloaded=True):
        if media.media_file.path.startswith(download_dir):
            media_path = Path(media.media_file.path)
            relative_path = media_path.relative_to(download_dir_path)
            media.media_file.name = str(relative_path)
            media.save()

# Function above has been copied/modified and RunPython operations adjusted.

def media_file_location():
    return str(settings.DOWNLOAD_ROOT)

# Used the above function for storage location.


class Migration(migrations.Migration):

    dependencies = [
        ('sync', '0001_initial_squashed_0010_auto_20210924_0554'),
    ]

    operations = [
        migrations.AddField(
            model_name='source',
            name='write_json',
            field=models.BooleanField(default=False, help_text='Write a JSON file with the media info, these may be detected and used by some media servers', verbose_name='write json'),
        ),
        migrations.AlterField(
            model_name='media',
            name='downloaded_format',
            field=models.CharField(blank=True, help_text='Video format (resolution) of the downloaded media', max_length=30, null=True, verbose_name='downloaded format'),
        ),
        migrations.RunPython(
            code=fix_media_file,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='media',
            name='media_file',
            field=models.FileField(blank=True, help_text='Media file', max_length=255, null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/media-data/', location=media_file_location()), upload_to=sync.models.get_media_file_path, verbose_name='media file'),
        ),
        migrations.AddField(
            model_name='media',
            name='manual_skip',
            field=models.BooleanField(db_index=True, default=False, help_text='Media marked as "skipped", won\' be downloaded', verbose_name='manual_skip'),
        ),
        migrations.AlterField(
            model_name='media',
            name='skip',
            field=models.BooleanField(db_index=True, default=False, help_text='INTERNAL FLAG - Media will be skipped and not downloaded', verbose_name='skip'),
        ),
        migrations.AddField(
            model_name='source',
            name='embed_metadata',
            field=models.BooleanField(default=False, help_text='Embed metadata from source into file', verbose_name='embed metadata'),
        ),
        migrations.AddField(
            model_name='source',
            name='embed_thumbnail',
            field=models.BooleanField(default=False, help_text='Embed thumbnail into the file', verbose_name='embed thumbnail'),
        ),
        migrations.AddField(
            model_name='source',
            name='enable_sponsorblock',
            field=models.BooleanField(default=True, help_text='Use SponsorBlock?', verbose_name='enable sponsorblock'),
        ),
        migrations.AddField(
            model_name='source',
            name='sponsorblock_categories',
            field=sync.fields.CommaSepChoiceField(default='all', help_text='Select the sponsorblocks you want to enforce', max_length=128, possible_choices=('', ''), separator=','),
        ),
        migrations.AddField(
            model_name='source',
            name='write_subtitles',
            field=models.BooleanField(default=False, help_text='Download video subtitles', verbose_name='write subtitles'),
        ),
        migrations.AddField(
            model_name='source',
            name='delete_removed_media',
            field=models.BooleanField(default=False, help_text='Delete media that is no longer on this playlist', verbose_name='delete removed media'),
        ),
        migrations.AddField(
            model_name='source',
            name='filter_text',
            field=models.CharField(blank=True, default='', help_text='Regex compatible filter string for video titles', max_length=100, verbose_name='filter string'),
        ),
        migrations.AddField(
            model_name='source',
            name='auto_subtitles',
            field=models.BooleanField(default=False, help_text='Accept auto-generated subtitles', verbose_name='accept auto-generated subs'),
        ),
        migrations.AddField(
            model_name='source',
            name='sub_langs',
            field=models.CharField(default='en', help_text='List of subtitles langs to download, comma-separated. Example: en,fr or all,-fr,-live_chat', max_length=30, validators=[django.core.validators.RegexValidator(message='Subtitle langs must be a comma-separated list of langs. example: en,fr or all,-fr,-live_chat', regex='^(\\-?[\\_\\.a-zA-Z]+,)*(\\-?[\\_\\.a-zA-Z]+){1}$')], verbose_name='subs langs'),
        ),
    ]
